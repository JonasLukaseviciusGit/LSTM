import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import r2_score
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Dense, LSTM
from tensorflow.python.keras.callbacks import Callback
from tensorflow.python.keras.models import load_model
import matplotlib.pyplot as plt

path = r'C:\Users\HP\Documents\DS\datasets\Binance_1min_candlesticks\BTC-USDT.parquet'
data = pd.read_parquet(path)

data = data.head(2000000+1000+1000+1000)
data = data.tail(1000)

data = data['close'].values.reshape(-1, 1)

# Scale data
scaler = MinMaxScaler()
data = scaler.fit_transform(data)

model = load_model(r"C:\Users\HP\Documents\DS\baigiamasis\trained_models\LSTM\10th\10--4___10-100\epoch5.h5")

context_size = 100
steps_forward = 10

preds_and_reals = []

total_preds = len(data) - context_size - 10
i = 0

while i < len(data) - context_size - steps_forward:
    context = data[i:i + context_size].reshape(1, 100, 1)

    prediction = model.predict(context)
    prediction = list(scaler.inverse_transform(prediction))[0].tolist()[0]

    prediction_right = list(scaler.inverse_transform(data[i + context_size:i + context_size + steps_forward].reshape(-1, 1)))
    prediction_right = [arr[0] for arr in prediction_right]
    real = prediction_right[-1]
    total = [prediction, real]
    print(str(i) + '/' + str(total_preds))

    if prediction > real:
        total.append(1)
    else:
        total.append(0)

    preds_and_reals.append(total)

    i += 1

preds = [sublist[0] for sublist in preds_and_reals]
reals = [sublist[1] for sublist in preds_and_reals]
signal = [sublist[2] for sublist in preds_and_reals]

# ######################################

# sukurti realu backtest'inima (pirkimas, pardavimas)
buy = 0

buys = []

for i in range(len(reals)):
    if buy == 0 and signal[i] == 1:
        buy = 1
        buys.append([reals[i]])
    if buy == 1 and signal[i] == 0:
        buy = 0
        buys[-1].append(reals[i])

print(buys)

differences = []

for buy in buys:
    differences.append(buy[0]/buy[1])

start_capital = 1
print('start capital: ' + str(round(start_capital, 2)))
for element in differences:
    start_capital = start_capital * element
print('end capital: ' + str(round(start_capital, 2)))

holding_value = reals[-1]/reals[0]
print('holding value: ' + str(round(holding_value, 2)))


# ######################################
# Create a figure and axes
fig, ax = plt.subplots()

# Iterate over the third list to plot the line segments with color
for i in range(len(signal)-1):
    color = 'red' if signal[i] == 0 else 'green'
    ax.plot([i, i+1], [reals[i], reals[i+1]], color=color)

# Set labels and title
ax.set_xlabel('Index')
ax.set_ylabel('Second List Value')
ax.set_title('Line Chart with Colored Line')

# Show the plot
plt.show()
